{"version":3,"sources":["GlobalStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TaskList","useSelector","map","onClick","Wrapper","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","black","App","document","getElementById"],"mappings":"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","file":"static/js/main.b470e9c6.chunk.js","sourcesContent":["import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-size: 18px;\r\n    background: ${({ theme }) => theme.color.gallery};\r\n  }\r\n\r\n`;\r\n  \r\n  \r\n  \r\n  ","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst tasksSlice = createSlice({\r\n    name: `tasks`,\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n\r\n        },\r\n\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\n\r\n\r\nexport default tasksSlice.reducer;\r\n\r\n\r\n","import { filter } from \"async\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.color.alto};\r\n    \r\n    `; \r\n    \r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.4s;\r\n\r\n    &:hover {\r\n        filter: brigthtness(110%);\r\n        transform: scale(1.1);\r\n}\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n}\r\n`;\r\n\r\n","\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { Button, Input, StyledForm } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px slid ${({ theme }) => theme.color.alto};\r\n\r\n    \r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: bacground 0.4;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button} from \"./styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from \"../tasksSlice\";\r\n\r\n\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\nreturn (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n                >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}\r\n                >\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id))}\r\n                >\r\n                    🧺\r\n            </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n};\r\n\r\nexport default TaskList;\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: 0.4s;\r\n    color: ${({ theme }) => theme.color.teal};\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectHideDone, setAllDone, toggleHideDone, selectAreTasksEmpty, selectIsEveryTaskDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n        return (\r\n        <Wrapper>\r\n        {!areTasksEmpty > 0 && (\r\n            <>\r\n                <Button onClick={() => dispatch(toggleHideDone())}>\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n            </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={isEveryTaskDone}\r\n                >\r\n                    Ukończ wszystkie\r\n            </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n\r\n)};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.alto};\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper, Body, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n<Body>\r\n  {body}\r\n</Body>\r\n</Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    \r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\n\r\n\r\nfunction Tasks() {\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { GlobalStyle} from \"./GlobalStyle\";\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}