{"version":3,"sources":["GlobalStyle.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/queryParameters.js","routes.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Input/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/FetchExampleTaskButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/Author.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","taskContent","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSucces","fetchExampleTasksError","actions","setTasks","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","StyledLink","Link","black","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","toTask","TaskList","query","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","task","onClick","to","Wrapper","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","FetchExampleTaskButton","TaskPage","useParams","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","Navigation","path","Author","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.0ea5596d.chunk.js","sourcesContent":["import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-size: 18px;\r\n    background: ${({ theme }) => theme.color.gallery};\r\n  }\r\n\r\n`;\r\n  \r\n  \r\n  \r\n  ","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"../tasks/tasksLocalStorage\";\r\n\r\n\r\nconst tasksSlice = createSlice({\r\n    name: `tasks`,\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: taskContent }) => {\r\n            tasks.push(taskContent);\r\n        },\r\n\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n\r\n        },\r\n\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n\r\n        fetchExampleTasks: state => { \r\n                state.loading = true;\r\n        },\r\n\r\n        fetchExampleTasksSucces: (state, { payload: tasks}) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n\r\n        },\r\n\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSucces,\r\n    fetchExampleTasksError,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    \r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return selectTasks(state).filter(({ content }) => \r\n    content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n    \r\n    \r\n\r\nexport default tasksSlice.reducer;\r\n\r\n\r\n","\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.color.alto};\r\n    \r\n    `; \r\n    \r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.4s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n \r\n        transform: scale(1.1);\r\n}\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n}\r\n`;\r\n\r\n","\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { Button, Input, StyledForm } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!newTaskContent.trim()) {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const StyledLink = styled(Link)`\r\ncolor: ${({ theme }) => theme.color.black};\r\ntext-decoration: none;\r\n&:hover {\r\n    text-decoration: underline;\r\n    color: ${({ theme }) => theme.color.teal};\r\n}\r\n\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px slid ${({ theme }) => theme.color.alto};\r\n\r\n    \r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: bacground 0.4;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","export default \"szukaj\";","import { useHistory, useLocation } from \"react-router\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { toTask } from \"../../../../routes\";\r\n\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\nreturn (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n                >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    <StyledLink to={toTask({ id: task.id })}>\r\n                        {task.content}\r\n                        </StyledLink>\r\n                    \r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id))}\r\n                >\r\n                    🧺\r\n            </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n};\r\n\r\nexport default TaskList;\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n\r\n    background: transparent;\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: filter 0.4s;\r\n    color: ${({ theme }) => theme.color.teal};\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Button from \"../Button\";\r\nimport { \r\n    selectHideDone, \r\n    setAllDone, \r\n    toggleHideDone, \r\n    selectAreTasksEmpty, \r\n    selectIsEveryTaskDone, \r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n        return (\r\n        <Wrapper>\r\n            \r\n        {!areTasksEmpty > 0 && (\r\n            <>\r\n                <Button onClick={() => dispatch(toggleHideDone())}>\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n            </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={isEveryTaskDone}\r\n                >\r\n                    Ukończ wszystkie\r\n            </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n\r\n)};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.alto};\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper, Body, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n<Body>\r\n  {body}\r\n</Body>\r\n</Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    \r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\n\r\nexport default styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.color.alto};\r\n    \r\n    `; ","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n        \r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n            placeholder=\"Filtruj zadania\"\r\n            value={query || \"\"}\r\n            onChange={onInputChange}\r\n        />\r\n        </Wrapper>\r\n    );\r\n\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport Button from \"../Button\";\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n\r\nreturn (\r\n    <Button disabled={loading} \r\n    onClick={() => dispatch(fetchExampleTasks())}>\r\n                {\r\n                    loading\r\n                    ? \"Ładowanie...\"\r\n                    : \"Pobierz przykładowe zadania\"\r\n                }\r\n            </Button>\r\n);\r\n};","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\nimport FetchExampleTaskButton from \"./FetchExampleTaskButton\";\r\n\r\n\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={<FetchExampleTaskButton/>}\r\n      />\r\n\r\n\r\n      <Section\r\n        title=\"Wyszkukiwarka\"\r\n        body={<Search />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import React from \"react\"; \r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Task details\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania\"}\r\n        body={!!task && (\r\n          <><strong>Ukończone zadanie:</strong> \r\n          {task.done ? \"Tak\" : \"Nie\"}\r\n        </>\r\n        )}\r\n      />\r\n</Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n\r\n    <Container>\r\n        <Header title=\"About Author\" />\r\n        <Section\r\n            title=\"Emilia Warakomska\"\r\n            body={\r\n                <>\r\n                    <p>\r\n                        <strong>Mam na imię Emilia i uwielbiam się uczyć.</strong> Moją ogromną pasją jest zdrowy styl życia,\r\n                        trenuję od 16 lat, a przez 10 lat byłam zafascynowana sportami sylwetkowymi, dlatego\r\n                        przez 5 lat trenowałam wyczynowo ten sport (z elementami gimnastyki). Niestety doznałam 2 \r\n                        poważnych kontuzji kolan.\r\n                    </p>\r\n                    <p>\r\n                        Kocham wyzwania, <em>nawet nie wiecie jak bardzo.</em> <strong>Mam charakter Wojownika,</strong> więc nie ma dla mnie rzeczy niemożliwych.\r\n                    </p>\r\n                </>\r\n\r\n            }\r\n        />\r\n    </Container>\r\n);","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: ${({ theme }) => theme.color.white};\r\n    text-decoration: none;\r\n\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    \r\n    &:hover {\r\n        border-bottom: 1px solid;\r\n    }\r\n\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    background: ${({ theme }) => theme.color.teal};\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    margin: 20px;\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Tasks</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>About Author</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Author from \"./features/author/Author\";\r\n\r\nimport { \r\n    HashRouter, \r\n    Switch, \r\n    Route, \r\n    Redirect \r\n} from \"react-router-dom\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n\r\n            <Switch>\r\n                <Route path={toTask()}>\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path={toTasks()}>\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path={toAuthor()}>\r\n                    <Author />\r\n                </Route>\r\n                <Route>\r\n                    <Redirect to={toTasks()} />\r\n                </Route>\r\n            </Switch>\r\n</HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeEvery, takeLatest, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, setTasks} from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"../tasks/tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n\r\n}","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { GlobalStyle} from \"./GlobalStyle\";\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}